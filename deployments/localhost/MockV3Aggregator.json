{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc27f1d94af84403b634511e8159aa85c5403719506c7454273ec43d42d2e472",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "697002",
    "logsBloom": "0x
    "blockHash": "0xbc2f4c63e2fac40b7169770cca202caadb23e07737a768322c0f81cfb7078bea",
    "transactionHash": "0xbc27f1d94af84403b634511e8159aa85c5403719506c7454273ec43d42d2e472",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "697002",
    "status": 1,
    "byzantium": true
  },
  "args": [
    8,
    189360777776
  ],
  "numDeployments": 1,
  "solcInputHash": "da8d6f89530350ec65c35dfb0af71693",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"MockV3Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockV3Aggregator.sol\":\"MockV3Aggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/test/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MockV3Aggregator\\r\\n * @notice Based on the FluxAggregator contract\\r\\n * @notice Use this contract when you need to test\\r\\n * other contract's ability to read data from an\\r\\n * aggregator contract, but how the aggregator got\\r\\n * its answer is unimportant\\r\\n */\\r\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\r\\n    uint256 public constant override version = 0;\\r\\n\\r\\n    uint8 public override decimals;\\r\\n    int256 public override latestAnswer;\\r\\n    uint256 public override latestTimestamp;\\r\\n    uint256 public override latestRound;\\r\\n\\r\\n    mapping(uint256 => int256) public override getAnswer;\\r\\n    mapping(uint256 => uint256) public override getTimestamp;\\r\\n    mapping(uint256 => uint256) private getStartedAt;\\r\\n\\r\\n    constructor(uint8 _decimals, int256 _initialAnswer) {\\r\\n        decimals = _decimals;\\r\\n        updateAnswer(_initialAnswer);\\r\\n    }\\r\\n\\r\\n    function updateAnswer(int256 _answer) public {\\r\\n        latestAnswer = _answer;\\r\\n        latestTimestamp = block.timestamp;\\r\\n        latestRound++;\\r\\n        getAnswer[latestRound] = _answer;\\r\\n        getTimestamp[latestRound] = block.timestamp;\\r\\n        getStartedAt[latestRound] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function updateRoundData(\\r\\n        uint80 _roundId,\\r\\n        int256 _answer,\\r\\n        uint256 _timestamp,\\r\\n        uint256 _startedAt\\r\\n    ) public {\\r\\n        latestRound = _roundId;\\r\\n        latestAnswer = _answer;\\r\\n        latestTimestamp = _timestamp;\\r\\n        getAnswer[latestRound] = _answer;\\r\\n        getTimestamp[latestRound] = _timestamp;\\r\\n        getStartedAt[latestRound] = _startedAt;\\r\\n    }\\r\\n\\r\\n    function getRoundData(uint80 _roundId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _roundId,\\r\\n            getAnswer[_roundId],\\r\\n            getStartedAt[_roundId],\\r\\n            getTimestamp[_roundId],\\r\\n            _roundId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function latestRoundData()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            uint80(latestRound),\\r\\n            getAnswer[latestRound],\\r\\n            getStartedAt[latestRound],\\r\\n            getTimestamp[latestRound],\\r\\n            uint80(latestRound)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function description() external pure override returns (string memory) {\\r\\n        return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\r\\n    }\\r\\n}\\r\\n\\r\\n// MockOracle\\r\\n// Function signatures, event signatures, log topics\\r\\n\",\"keccak256\":\"0x2370b5e2cca9b36d28a74a8f14f773b4f6acae2d0c03ac08e5db5841a29c42b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000af038038062000af0833981810160405281019062000037919062000111565b816000806101000a81548160ff021916908360ff16021790555062000062816200006a60201b60201c565b50506200022f565b8060018190555042600281905550600360008154809291906200008d9062000179565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b600081519050620000f481620001fb565b92915050565b6000815190506200010b8162000215565b92915050565b600080604083850312156200012b576200012a620001f6565b5b60006200013b85828601620000fa565b92505060206200014e85828601620000e3565b9150509250929050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b6000620001868262000162565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620001bc57620001bb620001c7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b620002068162000158565b81146200021257600080fd5b50565b62000220816200016c565b81146200022c57600080fd5b50565b6108b1806200023f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638205bf6a116100715780638205bf6a1461016b5780639a6fc8f514610189578063a87a20ce146101bd578063b5ab58dc146101d9578063b633620c14610209578063feaf968c14610239576100b4565b8063313ce567146100b95780634aa2011f146100d757806350d25bcd146100f357806354fd4d5014610111578063668a0f021461012f5780637284e4161461014d575b600080fd5b6100c161025b565b6040516100ce9190610707565b60405180910390f35b6100f160048036038101906100ec9190610580565b61026c565b005b6100fb6102e1565b604051610108919061065c565b60405180910390f35b6101196102e7565b6040516101269190610699565b60405180910390f35b6101376102ec565b6040516101449190610699565b60405180910390f35b6101556102f2565b6040516101629190610677565b60405180910390f35b61017361032f565b6040516101809190610699565b60405180910390f35b6101a3600480360381019061019e9190610553565b610335565b6040516101b49594939291906106b4565b60405180910390f35b6101d760048036038101906101d291906104f9565b6103b2565b005b6101f360048036038101906101ee9190610526565b610429565b604051610200919061065c565b60405180910390f35b610223600480360381019061021e9190610526565b610441565b6040516102309190610699565b60405180910390f35b610241610459565b6040516102529594939291906106b4565b60405180910390f35b60008054906101000a900460ff1681565b8369ffffffffffffffffffff16600381905550826001819055508160028190555082600460006003548152602001908152602001600020819055508160056000600354815260200190815260200160002081905550806006600060035481526020019081526020016000208190555050505050565b60015481565b600081565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b600080600080600085600460008869ffffffffffffffffffff16815260200190815260200160002054600660008969ffffffffffffffffffff16815260200190815260200160002054600560008a69ffffffffffffffffffff16815260200190815260200160002054899450945094509450945091939590929450565b8060018190555042600281905550600360008154809291906103d3906107a8565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b6000806000806000600354600460006003548152602001908152602001600020546006600060035481526020019081526020016000205460056000600354815260200190815260200160002054600354945094509450945094509091929394565b6000813590506104c981610836565b92915050565b6000813590506104de8161084d565b92915050565b6000813590506104f381610864565b92915050565b60006020828403121561050f5761050e610820565b5b600061051d848285016104ba565b91505092915050565b60006020828403121561053c5761053b610820565b5b600061054a848285016104cf565b91505092915050565b60006020828403121561056957610568610820565b5b6000610577848285016104e4565b91505092915050565b6000806000806080858703121561059a57610599610820565b5b60006105a8878288016104e4565b94505060206105b9878288016104ba565b93505060406105ca878288016104cf565b92505060606105db878288016104cf565b91505092959194509250565b6105f08161073e565b82525050565b600061060182610722565b61060b818561072d565b935061061b818560208601610775565b61062481610825565b840191505092915050565b61063881610748565b82525050565b6106478161075f565b82525050565b61065681610752565b82525050565b600060208201905061067160008301846105e7565b92915050565b6000602082019050818103600083015261069181846105f6565b905092915050565b60006020820190506106ae600083018461062f565b92915050565b600060a0820190506106c9600083018861063e565b6106d660208301876105e7565b6106e3604083018661062f565b6106f0606083018561062f565b6106fd608083018461063e565b9695505050505050565b600060208201905061071c600083018461064d565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b83811015610793578082015181840152602081019050610778565b838111156107a2576000848401525b50505050565b60006107b382610748565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107e6576107e56107f1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b61083f8161073e565b811461084a57600080fd5b50565b61085681610748565b811461086157600080fd5b50565b61086d8161075f565b811461087857600080fd5b5056fea264697066735822122038708d43d6ee1d5d14a854442f96884372e3a72591d5e2d6ac148d2aa03203c364736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638205bf6a116100715780638205bf6a1461016b5780639a6fc8f514610189578063a87a20ce146101bd578063b5ab58dc146101d9578063b633620c14610209578063feaf968c14610239576100b4565b8063313ce567146100b95780634aa2011f146100d757806350d25bcd146100f357806354fd4d5014610111578063668a0f021461012f5780637284e4161461014d575b600080fd5b6100c161025b565b6040516100ce9190610707565b60405180910390f35b6100f160048036038101906100ec9190610580565b61026c565b005b6100fb6102e1565b604051610108919061065c565b60405180910390f35b6101196102e7565b6040516101269190610699565b60405180910390f35b6101376102ec565b6040516101449190610699565b60405180910390f35b6101556102f2565b6040516101629190610677565b60405180910390f35b61017361032f565b6040516101809190610699565b60405180910390f35b6101a3600480360381019061019e9190610553565b610335565b6040516101b49594939291906106b4565b60405180910390f35b6101d760048036038101906101d291906104f9565b6103b2565b005b6101f360048036038101906101ee9190610526565b610429565b604051610200919061065c565b60405180910390f35b610223600480360381019061021e9190610526565b610441565b6040516102309190610699565b60405180910390f35b610241610459565b6040516102529594939291906106b4565b60405180910390f35b60008054906101000a900460ff1681565b8369ffffffffffffffffffff16600381905550826001819055508160028190555082600460006003548152602001908152602001600020819055508160056000600354815260200190815260200160002081905550806006600060035481526020019081526020016000208190555050505050565b60015481565b600081565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b600080600080600085600460008869ffffffffffffffffffff16815260200190815260200160002054600660008969ffffffffffffffffffff16815260200190815260200160002054600560008a69ffffffffffffffffffff16815260200190815260200160002054899450945094509450945091939590929450565b8060018190555042600281905550600360008154809291906103d3906107a8565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b6000806000806000600354600460006003548152602001908152602001600020546006600060035481526020019081526020016000205460056000600354815260200190815260200160002054600354945094509450945094509091929394565b6000813590506104c981610836565b92915050565b6000813590506104de8161084d565b92915050565b6000813590506104f381610864565b92915050565b60006020828403121561050f5761050e610820565b5b600061051d848285016104ba565b91505092915050565b60006020828403121561053c5761053b610820565b5b600061054a848285016104cf565b91505092915050565b60006020828403121561056957610568610820565b5b6000610577848285016104e4565b91505092915050565b6000806000806080858703121561059a57610599610820565b5b60006105a8878288016104e4565b94505060206105b9878288016104ba565b93505060406105ca878288016104cf565b92505060606105db878288016104cf565b91505092959194509250565b6105f08161073e565b82525050565b600061060182610722565b61060b818561072d565b935061061b818560208601610775565b61062481610825565b840191505092915050565b61063881610748565b82525050565b6106478161075f565b82525050565b61065681610752565b82525050565b600060208201905061067160008301846105e7565b92915050565b6000602082019050818103600083015261069181846105f6565b905092915050565b60006020820190506106ae600083018461062f565b92915050565b600060a0820190506106c9600083018861063e565b6106d660208301876105e7565b6106e3604083018661062f565b6106f0606083018561062f565b6106fd608083018461063e565b9695505050505050565b600060208201905061071c600083018461064d565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b83811015610793578082015181840152602081019050610778565b838111156107a2576000848401525b50505050565b60006107b382610748565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107e6576107e56107f1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b61083f8161073e565b811461084a57600080fd5b50565b61085681610748565b811461086157600080fd5b50565b61086d8161075f565b811461087857600080fd5b5056fea264697066735822122038708d43d6ee1d5d14a854442f96884372e3a72591d5e2d6ac148d2aa03203c364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "MockV3Aggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4298,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 4301,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 4304,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4307,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestRound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4312,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getAnswer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 4317,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4321,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}