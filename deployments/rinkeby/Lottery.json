{
  "address": "0xEeb5d2884C4eA382Be78AB72A30d3CefAD0510C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aavePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MoneySentToWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prizePool",
          "type": "uint256"
        }
      ],
      "name": "NewPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "recentWinnerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recentWinner",
          "type": "address"
        }
      ],
      "name": "RandomNumberReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomRequestSent",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "checkAaveBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emrgStopLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayersNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lottery_state",
      "outputs": [
        {
          "internalType": "enum Lottery.LOTTERY_STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "playerDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recentWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsToAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFundsToWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAaveFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7f66b5791712c393860623679ab6131de47985ad4324f162885837c119e1ed2c",
  "receipt": {
    "to": null,
    "from": "0x1eb5C32514cAb413384b4289D54971033B164014",
    "contractAddress": "0xEeb5d2884C4eA382Be78AB72A30d3CefAD0510C0",
    "transactionIndex": 9,
    "gasUsed": "2681191",
    "logsBloom": "0x
    "blockHash": "0x9a5ffd4d5dfd9c6cc8d93ed11ff6e6fc4ab62051ba1a4c9cdc8fc9875a35293a",
    "transactionHash": "0x7f66b5791712c393860623679ab6131de47985ad4324f162885837c119e1ed2c",
    "logs": [],
    "blockNumber": 11126319,
    "cumulativeGasUsed": "4165910",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0x3561c45840e2681495ACCa3c50Ef4dAe330c94F8",
    "0x98a5F1520f7F7fb1e83Fe3398f9aBd151f8C65ed",
    "3156",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc"
  ],
  "numDeployments": 1,
  "solcInputHash": "9ed045bd2c15e32955e7336e6fe0ace9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aavePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MoneySentToWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recentWinnerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recentWinner\",\"type\":\"address\"}],\"name\":\"RandomNumberReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomRequestSent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"checkAaveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emrgStopLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery_state\",\"outputs\":[{\"internalType\":\"enum Lottery.LOTTERY_STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recentWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsToAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsToWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAaveFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"../interfaces/IPool.sol\\\";\\r\\nimport \\\"../interfaces/IWeth.sol\\\";\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2 {\\r\\n    uint256 public constant entranceFeeUSD = 50;\\r\\n    uint256 public prizePool;\\r\\n\\r\\n    address payable[] public players;\\r\\n    address payable public recentWinner;\\r\\n    address public owner;\\r\\n    mapping(address => uint256) public playerDeposit;\\r\\n\\r\\n    enum LOTTERY_STATE {\\r\\n        OPEN,\\r\\n        CLOSE,\\r\\n        CALCULATING_WINNER,\\r\\n        WINNER_SELECTED\\r\\n    }\\r\\n    LOTTERY_STATE public lottery_state;\\r\\n\\r\\n    //****Random number params\\r\\n    //Our subscription ID.\\r\\n    uint64 subscriptionId;\\r\\n    bytes32 keyHash;\\r\\n    uint32 callbackGasLimit = 100000;\\r\\n    uint16 requestConfirmations = 3;\\r\\n    uint32 numWords = 1;\\r\\n    //*****\\r\\n\\r\\n    uint256[] public randomWords;\\r\\n\\r\\n    AggregatorV3Interface priceFeed;\\r\\n    VRFCoordinatorV2Interface vrfCoordinator;\\r\\n    IPool aavePool;\\r\\n    IWeth wethContract;\\r\\n\\r\\n    event NewPlayer(\\r\\n        uint256 date,\\r\\n        address player,\\r\\n        uint256 amount,\\r\\n        uint256 prizePool\\r\\n    );\\r\\n    event RandomRequestSent(uint256 date, uint256 requestId);\\r\\n    event RandomNumberReceived(\\r\\n        uint256 date,\\r\\n        uint256 randomNumber,\\r\\n        uint256 recentWinnerIndex,\\r\\n        address recentWinner\\r\\n    );\\r\\n    event EthReceived(uint256 date, address player, uint256 amount);\\r\\n    event MoneySentToWinner(uint256 date, address player, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        address _priceFeedAddress,\\r\\n        address _vrfCoordinator,\\r\\n        address _aavePoolAddress,\\r\\n        address _wethContractAddress,\\r\\n        uint64 _subscriptionId,\\r\\n        bytes32 _keyHash\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\r\\n        lottery_state = LOTTERY_STATE.CLOSE;\\r\\n        owner = msg.sender;\\r\\n        priceFeed = AggregatorV3Interface(_priceFeedAddress);\\r\\n        vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\r\\n        aavePool = IPool(_aavePoolAddress);\\r\\n        wethContract = IWeth(_wethContractAddress);\\r\\n        subscriptionId = _subscriptionId;\\r\\n        keyHash = _keyHash;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit EthReceived(block.timestamp, msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    //Show actual entrance fee in wei\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        //50*10^(8+18)/3000*10^8 to have answer in wei\\r\\n        (, int256 conversionRate, , , ) = priceFeed.latestRoundData();\\r\\n        return (entranceFeeUSD * 10**26) / uint256(conversionRate);\\r\\n    }\\r\\n\\r\\n    //Show number of participants\\r\\n    function getPlayersNumber() public view returns (uint256) {\\r\\n        return players.length;\\r\\n    }\\r\\n\\r\\n    function enter() public payable lotteryOpen {\\r\\n        require(msg.value >= getEntranceFee(), \\\"Not enough ETH to enter!\\\");\\r\\n        players.push(payable(msg.sender));\\r\\n        playerDeposit[msg.sender] += msg.value;\\r\\n        wethContract.deposit{value: msg.value}();\\r\\n        supplyFundsAave(msg.value);\\r\\n        prizePool += msg.value;\\r\\n        emit NewPlayer(block.timestamp, msg.sender, msg.value, prizePool);\\r\\n    }\\r\\n\\r\\n    //*****Admin functions *********************************\\r\\n    function startLottery() public lotteryClose onlyOwner {\\r\\n        for (uint256 i = 1; i < players.length; i++) {\\r\\n            address player = players[i];\\r\\n            playerDeposit[player] = 0;\\r\\n        }\\r\\n        players = new address payable[](0);\\r\\n        recentWinner = payable(address(0));\\r\\n        prizePool = 0;\\r\\n        lottery_state = LOTTERY_STATE.OPEN;\\r\\n    }\\r\\n\\r\\n    function endLottery() public lotteryOpen onlyOwner {\\r\\n        lottery_state = LOTTERY_STATE.CALCULATING_WINNER;\\r\\n        requestRandomWords();\\r\\n    }\\r\\n\\r\\n    function emrgStopLottery() public onlyOwner {\\r\\n        uint256 bigValue = 100 * 10**18;\\r\\n        withdrawAaveFunds(bigValue);\\r\\n        uint256 wethBalance = wethContract.balanceOf(address(this));\\r\\n        changeToEth(wethBalance);\\r\\n        payable(owner).transfer(address(this).balance);\\r\\n        lottery_state = LOTTERY_STATE.CLOSE;\\r\\n    }\\r\\n\\r\\n    function transferFundsToWinner() public lotteryWinnerSelected onlyOwner {\\r\\n        withdrawAaveFunds(prizePool);\\r\\n        changeToEth(prizePool);\\r\\n        recentWinner.transfer(prizePool);\\r\\n        lottery_state = LOTTERY_STATE.CLOSE;\\r\\n        emit MoneySentToWinner(block.timestamp, recentWinner, prizePool);\\r\\n    }\\r\\n\\r\\n    function checkAaveBalance()\\r\\n        public\\r\\n        view\\r\\n        onlyOwner\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        (\\r\\n            uint256 total_collateral_base,\\r\\n            uint256 total_debt_base,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = aavePool.getUserAccountData(address(this));\\r\\n        return (total_collateral_base, total_debt_base);\\r\\n    }\\r\\n\\r\\n    function transferFundsToAdmin() public lotteryClose onlyOwner {\\r\\n        //Try big value\\r\\n        uint256 bigNumber = 10**18;\\r\\n        withdrawAaveFunds(bigNumber);\\r\\n        //Convert WETH to ETH\\r\\n        uint256 value = wethContract.balanceOf(address(this));\\r\\n        changeToEth(value);\\r\\n        //Send all Eth to owner\\r\\n        payable(owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    //***********Internal functions ********************\\r\\n    // Assumes the subscription is funded sufficiently.\\r\\n    function requestRandomWords() internal onlyOwner {\\r\\n        // Will revert if subscription is not set and funded.\\r\\n\\r\\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\r\\n            keyHash,\\r\\n            subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            numWords\\r\\n        );\\r\\n        emit RandomRequestSent(block.timestamp, requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256, /* requestId */\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal override {\\r\\n        require(\\r\\n            lottery_state == LOTTERY_STATE.CALCULATING_WINNER,\\r\\n            \\\"Lottery is not in correct state\\\"\\r\\n        );\\r\\n        randomWords = _randomWords;\\r\\n        require(randomWords[0] > 0, \\\"Random number should be > 0\\\");\\r\\n        uint256 recentWinnerIndex = randomWords[0] % players.length;\\r\\n        recentWinner = players[recentWinnerIndex];\\r\\n        lottery_state = LOTTERY_STATE.WINNER_SELECTED;\\r\\n        emit RandomNumberReceived(\\r\\n            block.timestamp,\\r\\n            randomWords[0],\\r\\n            recentWinnerIndex,\\r\\n            recentWinner\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function supplyFundsAave(uint256 amount) internal {\\r\\n        wethContract.approve(address(aavePool), amount);\\r\\n        aavePool.supply(address(wethContract), amount, address(this), 0);\\r\\n    }\\r\\n\\r\\n    //!!!!!!!!!!!!!!!\\r\\n    function withdrawAaveFunds(uint256 amount) public {\\r\\n        wethContract.approve(address(aavePool), amount);\\r\\n        aavePool.withdraw(address(wethContract), amount, address(this));\\r\\n    }\\r\\n\\r\\n    function changeToEth(uint256 _value) internal {\\r\\n        wethContract.approve(address(this), _value);\\r\\n        wethContract.withdraw(_value);\\r\\n    }\\r\\n\\r\\n    //********************Modifiers****************\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            msg.sender == owner,\\r\\n            \\\"Only admin is allowed to do this operation\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier lotteryOpen() {\\r\\n        require(\\r\\n            lottery_state == LOTTERY_STATE.OPEN,\\r\\n            \\\"Lottery should be started\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier lotteryClose() {\\r\\n        require(\\r\\n            lottery_state == LOTTERY_STATE.CLOSE,\\r\\n            \\\"Lottery should be finished\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier lotteryCalculatingWinner() {\\r\\n        require(\\r\\n            lottery_state == LOTTERY_STATE.CALCULATING_WINNER,\\r\\n            \\\"Lottery should selecting winner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier lotteryWinnerSelected() {\\r\\n        require(\\r\\n            lottery_state == LOTTERY_STATE.WINNER_SELECTED,\\r\\n            \\\"Lottery should select winner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6d437a4ab4c03bc17143de7c8295dd67ee3e7a998d813b4e254cf77eaa5d1759\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct ReserveData {\\r\\n        //stores the reserve configuration\\r\\n        ReserveConfigurationMap configuration;\\r\\n        //the liquidity index. Expressed in ray\\r\\n        uint128 liquidityIndex;\\r\\n        //the current supply rate. Expressed in ray\\r\\n        uint128 currentLiquidityRate;\\r\\n        //variable borrow index. Expressed in ray\\r\\n        uint128 variableBorrowIndex;\\r\\n        //the current variable borrow rate. Expressed in ray\\r\\n        uint128 currentVariableBorrowRate;\\r\\n        //the current stable borrow rate. Expressed in ray\\r\\n        uint128 currentStableBorrowRate;\\r\\n        //timestamp of last update\\r\\n        uint40 lastUpdateTimestamp;\\r\\n        //the id of the reserve. Represents the position in the list of the active reserves\\r\\n        uint16 id;\\r\\n        //aToken address\\r\\n        address aTokenAddress;\\r\\n        //stableDebtToken address\\r\\n        address stableDebtTokenAddress;\\r\\n        //variableDebtToken address\\r\\n        address variableDebtTokenAddress;\\r\\n        //address of the interest rate strategy\\r\\n        address interestRateStrategyAddress;\\r\\n        //the current treasury balance, scaled\\r\\n        uint128 accruedToTreasury;\\r\\n        //the outstanding unbacked aTokens minted through the bridging feature\\r\\n        uint128 unbacked;\\r\\n        //the outstanding debt borrowed against this asset in isolation mode\\r\\n        uint128 isolationModeTotalDebt;\\r\\n    }\\r\\n\\r\\n    struct ReserveConfigurationMap {\\r\\n        //bit 0-15: LTV\\r\\n        //bit 16-31: Liq. threshold\\r\\n        //bit 32-47: Liq. bonus\\r\\n        //bit 48-55: Decimals\\r\\n        //bit 56: reserve is active\\r\\n        //bit 57: reserve is frozen\\r\\n        //bit 58: borrowing is enabled\\r\\n        //bit 59: stable rate borrowing enabled\\r\\n        //bit 60: asset is paused\\r\\n        //bit 61: borrowing in isolation mode is enabled\\r\\n        //bit 62-63: reserved\\r\\n        //bit 64-79: reserve factor\\r\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n        //bit 152-167 liquidation protocol fee\\r\\n        //bit 168-175 eMode category\\r\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n        //bit 252-255 unused\\r\\n\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    struct UserConfigurationMap {\\r\\n        /**\\r\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n         * asset is borrowed by the user.\\r\\n         */\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    struct EModeCategory {\\r\\n        // each eMode category has a custom ltv and liquidation threshold\\r\\n        uint16 ltv;\\r\\n        uint16 liquidationThreshold;\\r\\n        uint16 liquidationBonus;\\r\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n        address priceSource;\\r\\n        string label;\\r\\n    }\\r\\n\\r\\n    enum InterestRateMode {\\r\\n        NONE,\\r\\n        STABLE,\\r\\n        VARIABLE\\r\\n    }\\r\\n\\r\\n    struct ReserveCache {\\r\\n        uint256 currScaledVariableDebt;\\r\\n        uint256 nextScaledVariableDebt;\\r\\n        uint256 currPrincipalStableDebt;\\r\\n        uint256 currAvgStableBorrowRate;\\r\\n        uint256 currTotalStableDebt;\\r\\n        uint256 nextAvgStableBorrowRate;\\r\\n        uint256 nextTotalStableDebt;\\r\\n        uint256 currLiquidityIndex;\\r\\n        uint256 nextLiquidityIndex;\\r\\n        uint256 currVariableBorrowIndex;\\r\\n        uint256 nextVariableBorrowIndex;\\r\\n        uint256 currLiquidityRate;\\r\\n        uint256 currVariableBorrowRate;\\r\\n        uint256 reserveFactor;\\r\\n        ReserveConfigurationMap reserveConfiguration;\\r\\n        address aTokenAddress;\\r\\n        address stableDebtTokenAddress;\\r\\n        address variableDebtTokenAddress;\\r\\n        uint40 reserveLastUpdateTimestamp;\\r\\n        uint40 stableDebtLastUpdateTimestamp;\\r\\n    }\\r\\n\\r\\n    struct ExecuteLiquidationCallParams {\\r\\n        uint256 reservesCount;\\r\\n        uint256 debtToCover;\\r\\n        address collateralAsset;\\r\\n        address debtAsset;\\r\\n        address user;\\r\\n        bool receiveAToken;\\r\\n        address priceOracle;\\r\\n        uint8 userEModeCategory;\\r\\n        address priceOracleSentinel;\\r\\n    }\\r\\n\\r\\n    struct ExecuteSupplyParams {\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        address onBehalfOf;\\r\\n        uint16 referralCode;\\r\\n    }\\r\\n\\r\\n    struct ExecuteBorrowParams {\\r\\n        address asset;\\r\\n        address user;\\r\\n        address onBehalfOf;\\r\\n        uint256 amount;\\r\\n        InterestRateMode interestRateMode;\\r\\n        uint16 referralCode;\\r\\n        bool releaseUnderlying;\\r\\n        uint256 maxStableRateBorrowSizePercent;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n        address priceOracleSentinel;\\r\\n    }\\r\\n\\r\\n    struct ExecuteRepayParams {\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        InterestRateMode interestRateMode;\\r\\n        address onBehalfOf;\\r\\n        bool useATokens;\\r\\n    }\\r\\n\\r\\n    struct ExecuteWithdrawParams {\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        address to;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n    }\\r\\n\\r\\n    struct ExecuteSetUserEModeParams {\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 categoryId;\\r\\n    }\\r\\n\\r\\n    struct FinalizeTransferParams {\\r\\n        address asset;\\r\\n        address from;\\r\\n        address to;\\r\\n        uint256 amount;\\r\\n        uint256 balanceFromBefore;\\r\\n        uint256 balanceToBefore;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 fromEModeCategory;\\r\\n    }\\r\\n\\r\\n    struct FlashloanParams {\\r\\n        address receiverAddress;\\r\\n        address[] assets;\\r\\n        uint256[] amounts;\\r\\n        uint256[] interestRateModes;\\r\\n        address onBehalfOf;\\r\\n        bytes params;\\r\\n        uint16 referralCode;\\r\\n        uint256 flashLoanPremiumToProtocol;\\r\\n        uint256 flashLoanPremiumTotal;\\r\\n        uint256 maxStableRateBorrowSizePercent;\\r\\n        uint256 reservesCount;\\r\\n        address addressesProvider;\\r\\n        uint8 userEModeCategory;\\r\\n        bool isAuthorizedFlashBorrower;\\r\\n    }\\r\\n\\r\\n    struct FlashloanSimpleParams {\\r\\n        address receiverAddress;\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        bytes params;\\r\\n        uint16 referralCode;\\r\\n        uint256 flashLoanPremiumToProtocol;\\r\\n        uint256 flashLoanPremiumTotal;\\r\\n    }\\r\\n\\r\\n    struct FlashLoanRepaymentParams {\\r\\n        uint256 amount;\\r\\n        uint256 totalPremium;\\r\\n        uint256 flashLoanPremiumToProtocol;\\r\\n        address asset;\\r\\n        address receiverAddress;\\r\\n        uint16 referralCode;\\r\\n    }\\r\\n\\r\\n    struct CalculateUserAccountDataParams {\\r\\n        UserConfigurationMap userConfig;\\r\\n        uint256 reservesCount;\\r\\n        address user;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n    }\\r\\n\\r\\n    struct ValidateBorrowParams {\\r\\n        ReserveCache reserveCache;\\r\\n        UserConfigurationMap userConfig;\\r\\n        address asset;\\r\\n        address userAddress;\\r\\n        uint256 amount;\\r\\n        InterestRateMode interestRateMode;\\r\\n        uint256 maxStableLoanPercent;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n        address priceOracleSentinel;\\r\\n        bool isolationModeActive;\\r\\n        address isolationModeCollateralAddress;\\r\\n        uint256 isolationModeDebtCeiling;\\r\\n    }\\r\\n\\r\\n    struct ValidateLiquidationCallParams {\\r\\n        ReserveCache debtReserveCache;\\r\\n        uint256 totalDebt;\\r\\n        uint256 healthFactor;\\r\\n        address priceOracleSentinel;\\r\\n    }\\r\\n\\r\\n    struct CalculateInterestRatesParams {\\r\\n        uint256 unbacked;\\r\\n        uint256 liquidityAdded;\\r\\n        uint256 liquidityTaken;\\r\\n        uint256 totalStableDebt;\\r\\n        uint256 totalVariableDebt;\\r\\n        uint256 averageStableBorrowRate;\\r\\n        uint256 reserveFactor;\\r\\n        address reserve;\\r\\n        address aToken;\\r\\n    }\\r\\n\\r\\n    struct InitReserveParams {\\r\\n        address asset;\\r\\n        address aTokenAddress;\\r\\n        address stableDebtAddress;\\r\\n        address variableDebtAddress;\\r\\n        address interestRateStrategyAddress;\\r\\n        uint16 reservesCount;\\r\\n        uint16 maxNumberReserves;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2ba943725a0e34eac48b3afcafa73c19c46ce4fdff03fef1114e52d55076b04c\",\"license\":\"BUSL-1.1\"},\"interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\r\\n\\r\\nimport {DataTypes} from \\\"../contracts/types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPool\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for an Aave Pool.\\r\\n **/\\r\\ninterface IPool {\\r\\n    /**\\r\\n     * @dev Emitted on mintUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\r\\n     * @param amount The amount of supplied assets\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event MintUnbacked(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on backUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param backer The address paying for the backing\\r\\n     * @param amount The amount added as backing\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    event BackUnbacked(\\r\\n        address indexed reserve,\\r\\n        address indexed backer,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on supply()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\r\\n     * @param amount The amount supplied\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Supply(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on withdraw()\\r\\n     * @param reserve The address of the underlying asset being withdrawn\\r\\n     * @param user The address initiating the withdrawal, owner of aTokens\\r\\n     * @param to The address that will receive the underlying\\r\\n     * @param amount The amount to be withdrawn\\r\\n     **/\\r\\n    event Withdraw(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n     * @param reserve The address of the underlying asset being borrowed\\r\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n     * initiator of the transaction on flashLoan()\\r\\n     * @param onBehalfOf The address that will be getting the debt\\r\\n     * @param amount The amount borrowed out\\r\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Borrow(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 borrowRate,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on repay()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n     * @param amount The amount repaid\\r\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\r\\n     **/\\r\\n    event Repay(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed repayer,\\r\\n        uint256 amount,\\r\\n        bool useATokens\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on swapBorrowRateMode()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user swapping his rate mode\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    event SwapBorrowRateMode(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        DataTypes.InterestRateMode interestRateMode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param totalDebt The total isolation mode debt for the reserve\\r\\n     */\\r\\n    event IsolationModeTotalDebtUpdated(\\r\\n        address indexed asset,\\r\\n        uint256 totalDebt\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the user selects a certain asset category for eMode\\r\\n     * @param user The address of the user\\r\\n     * @param categoryId The category id\\r\\n     **/\\r\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralEnabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralDisabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on rebalanceStableBorrowRate()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user for which the rebalance has been executed\\r\\n     **/\\r\\n    event RebalanceStableBorrowRate(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on flashLoan()\\r\\n     * @param target The address of the flash loan receiver contract\\r\\n     * @param initiator The address initiating the flash loan\\r\\n     * @param asset The address of the asset being flash borrowed\\r\\n     * @param amount The amount flash borrowed\\r\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\r\\n     * @param premium The fee flash borrowed\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event FlashLoan(\\r\\n        address indexed target,\\r\\n        address initiator,\\r\\n        address indexed asset,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 premium,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a borrower is liquidated.\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\r\\n     * @param liquidator The address of the liquidator\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    event LiquidationCall(\\r\\n        address indexed collateralAsset,\\r\\n        address indexed debtAsset,\\r\\n        address indexed user,\\r\\n        uint256 debtToCover,\\r\\n        uint256 liquidatedCollateralAmount,\\r\\n        address liquidator,\\r\\n        bool receiveAToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the state of a reserve is updated.\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param liquidityRate The next liquidity rate\\r\\n     * @param stableBorrowRate The next stable borrow rate\\r\\n     * @param variableBorrowRate The next variable borrow rate\\r\\n     * @param liquidityIndex The next liquidity index\\r\\n     * @param variableBorrowIndex The next variable borrow index\\r\\n     **/\\r\\n    event ReserveDataUpdated(\\r\\n        address indexed reserve,\\r\\n        uint256 liquidityRate,\\r\\n        uint256 stableBorrowRate,\\r\\n        uint256 variableBorrowRate,\\r\\n        uint256 liquidityIndex,\\r\\n        uint256 variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\r\\n     * @param reserve The address of the reserve\\r\\n     * @param amountMinted The amount minted to the treasury\\r\\n     **/\\r\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\r\\n\\r\\n    /**\\r\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\r\\n     * @param asset The address of the underlying asset to mint\\r\\n     * @param amount The amount to mint\\r\\n     * @param onBehalfOf The address that will receive the aTokens\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function mintUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\r\\n     * @param asset The address of the underlying asset to back\\r\\n     * @param amount The amount to back\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    function backUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function supply(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     **/\\r\\n    function supplyWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to withdraw\\r\\n     * @param amount The underlying amount to be withdrawn\\r\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\r\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n     *   different wallet\\r\\n     * @return The final amount withdrawn\\r\\n     **/\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n     * @param asset The address of the underlying asset to borrow\\r\\n     * @param amount The amount to be borrowed\\r\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n     * if he has been given credit delegation allowance\\r\\n     **/\\r\\n    function borrow(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        uint16 referralCode,\\r\\n        address onBehalfOf\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repay(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\r\\n     * equivalent debt tokens\\r\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\r\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\r\\n     * balance is not enough to cover the whole debt\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithATokens(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n     * - Users can be rebalanced if the following conditions are satisfied:\\r\\n     *     1. Usage ratio is above 95%\\r\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\r\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param user The address of the user to be rebalanced\\r\\n     **/\\r\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\r\\n     * @param asset The address of the underlying asset supplied\\r\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\r\\n     **/\\r\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    function liquidationCall(\\r\\n        address collateralAsset,\\r\\n        address debtAsset,\\r\\n        address user,\\r\\n        uint256 debtToCover,\\r\\n        bool receiveAToken\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\r\\n     * @param assets The addresses of the assets being flash-borrowed\\r\\n     * @param amounts The amounts of the assets being flash-borrowed\\r\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\r\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoan(\\r\\n        address receiverAddress,\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata interestRateModes,\\r\\n        address onBehalfOf,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\r\\n     * @param asset The address of the asset being flash-borrowed\\r\\n     * @param amount The amount of the asset being flash-borrowed\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoanSimple(\\r\\n        address receiverAddress,\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the user account data across all the reserves\\r\\n     * @param user The address of the user\\r\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\r\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\r\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\r\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\r\\n     * @return ltv The loan to value of The user\\r\\n     * @return healthFactor The current health factor of the user\\r\\n     **/\\r\\n    function getUserAccountData(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalCollateralBase,\\r\\n            uint256 totalDebtBase,\\r\\n            uint256 availableBorrowsBase,\\r\\n            uint256 currentLiquidationThreshold,\\r\\n            uint256 ltv,\\r\\n            uint256 healthFactor\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\r\\n     * interest rate strategy\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\r\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\r\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\r\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function initReserve(\\r\\n        address asset,\\r\\n        address aTokenAddress,\\r\\n        address stableDebtAddress,\\r\\n        address variableDebtAddress,\\r\\n        address interestRateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Drop a reserve\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     **/\\r\\n    function dropReserve(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the interest rate strategy contract\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function setReserveInterestRateStrategyAddress(\\r\\n        address asset,\\r\\n        address rateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param configuration The new configuration bitmap\\r\\n     **/\\r\\n    function setConfiguration(\\r\\n        address asset,\\r\\n        DataTypes.ReserveConfigurationMap calldata configuration\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The configuration of the reserve\\r\\n     **/\\r\\n    function getConfiguration(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the user across all the reserves\\r\\n     * @param user The user address\\r\\n     * @return The configuration of the user\\r\\n     **/\\r\\n    function getUserConfiguration(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized income normalized income of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve's normalized income\\r\\n     */\\r\\n    function getReserveNormalizedIncome(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized variable debt per unit of asset\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve normalized variable debt\\r\\n     */\\r\\n    function getReserveNormalizedVariableDebt(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state and configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The state and configuration data of the reserve\\r\\n     **/\\r\\n    function getReserveData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveData memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Validates and finalizes an aToken transfer\\r\\n     * @dev Only callable by the overlying aToken of the `asset`\\r\\n     * @param asset The address of the underlying asset of the aToken\\r\\n     * @param from The user from which the aTokens are transferred\\r\\n     * @param to The user receiving the aTokens\\r\\n     * @param amount The amount being transferred/withdrawn\\r\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\r\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\r\\n     */\\r\\n    function finalizeTransfer(\\r\\n        address asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 balanceFromBefore,\\r\\n        uint256 balanceToBefore\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\r\\n     * @dev It does not include dropped reserves\\r\\n     * @return The addresses of the underlying assets of the initialized reserves\\r\\n     **/\\r\\n    function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\r\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\r\\n     * @return The address of the reserve associated with id\\r\\n     **/\\r\\n    function getReserveAddressById(uint16 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\r\\n     * @return The address of the PoolAddressesProvider\\r\\n     **/\\r\\n    function ADDRESSES_PROVIDER()\\r\\n        external\\r\\n        view\\r\\n        returns (IPoolAddressesProvider);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the protocol fee on the bridging\\r\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\r\\n     */\\r\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\r\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\r\\n     * - A part is collected by the protocol treasury\\r\\n     * @dev The total premium is calculated on the total borrowed amount\\r\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\r\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\r\\n     */\\r\\n    function updateFlashloanPremiums(\\r\\n        uint128 flashLoanPremiumTotal,\\r\\n        uint128 flashLoanPremiumToProtocol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Configures a new category for the eMode.\\r\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\r\\n     * The category 0 is reserved as it's the default for volatile assets\\r\\n     * @param id The id of the category\\r\\n     * @param config The configuration of the category\\r\\n     */\\r\\n    function configureEModeCategory(\\r\\n        uint8 id,\\r\\n        DataTypes.EModeCategory memory config\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the data of an eMode category\\r\\n     * @param id The id of the category\\r\\n     * @return The configuration data of the category\\r\\n     */\\r\\n    function getEModeCategoryData(uint8 id)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.EModeCategory memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to use the protocol in eMode\\r\\n     * @param categoryId The id of the category\\r\\n     */\\r\\n    function setUserEMode(uint8 categoryId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the eMode the user is using\\r\\n     * @param user The address of the user\\r\\n     * @return The eMode id\\r\\n     */\\r\\n    function getUserEMode(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\r\\n     * @dev It requires the given asset has zero debt ceiling\\r\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\r\\n     */\\r\\n    function resetIsolationModeTotalDebt(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\r\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\r\\n     */\\r\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total fee on flash loans\\r\\n     * @return The total fee on flashloans\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the bridge fees sent to protocol\\r\\n     * @return The bridge fee sent to the protocol treasury\\r\\n     */\\r\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the flashloan fees sent to protocol\\r\\n     * @return The flashloan fee sent to the protocol treasury\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\r\\n     * @return The maximum number of reserves supported\\r\\n     */\\r\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\r\\n     * @param assets The list of reserves for which the minting needs to be executed\\r\\n     **/\\r\\n    function mintToTreasury(address[] calldata assets) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rescue and transfer tokens locked in this contract\\r\\n     * @param token The address of the token\\r\\n     * @param to The address of the recipient\\r\\n     * @param amount The amount of token to transfer\\r\\n     */\\r\\n    function rescueTokens(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @dev Deprecated: Use the `supply` function instead\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xcdad113957100348a236266973e3a8dd12532bc04edaeacde0bccce0b7601c6b\",\"license\":\"AGPL-3.0\"},\"interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n **/\\r\\ninterface IPoolAddressesProvider {\\r\\n    /**\\r\\n     * @dev Emitted when the market identifier is updated.\\r\\n     * @param oldMarketId The old id of the market\\r\\n     * @param newMarketId The new id of the market\\r\\n     */\\r\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool is updated.\\r\\n     * @param oldAddress The old address of the Pool\\r\\n     * @param newAddress The new address of the Pool\\r\\n     */\\r\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool configurator is updated.\\r\\n     * @param oldAddress The old address of the PoolConfigurator\\r\\n     * @param newAddress The new address of the PoolConfigurator\\r\\n     */\\r\\n    event PoolConfiguratorUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle is updated.\\r\\n     * @param oldAddress The old address of the PriceOracle\\r\\n     * @param newAddress The new address of the PriceOracle\\r\\n     */\\r\\n    event PriceOracleUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL manager is updated.\\r\\n     * @param oldAddress The old address of the ACLManager\\r\\n     * @param newAddress The new address of the ACLManager\\r\\n     */\\r\\n    event ACLManagerUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL admin is updated.\\r\\n     * @param oldAddress The old address of the ACLAdmin\\r\\n     * @param newAddress The new address of the ACLAdmin\\r\\n     */\\r\\n    event ACLAdminUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle sentinel is updated.\\r\\n     * @param oldAddress The old address of the PriceOracleSentinel\\r\\n     * @param newAddress The new address of the PriceOracleSentinel\\r\\n     */\\r\\n    event PriceOracleSentinelUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool data provider is updated.\\r\\n     * @param oldAddress The old address of the PoolDataProvider\\r\\n     * @param newAddress The new address of the PoolDataProvider\\r\\n     */\\r\\n    event PoolDataProviderUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new proxy is created.\\r\\n     * @param id The identifier of the proxy\\r\\n     * @param proxyAddress The address of the created proxy contract\\r\\n     * @param implementationAddress The address of the implementation contract\\r\\n     */\\r\\n    event ProxyCreated(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address indexed implementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new non-proxied contract address is registered.\\r\\n     * @param id The identifier of the contract\\r\\n     * @param oldAddress The address of the old contract\\r\\n     * @param newAddress The address of the new contract\\r\\n     */\\r\\n    event AddressSet(\\r\\n        bytes32 indexed id,\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n     * @param id The identifier of the contract\\r\\n     * @param proxyAddress The address of the proxy contract\\r\\n     * @param oldImplementationAddress The address of the old implementation contract\\r\\n     * @param newImplementationAddress The address of the new implementation contract\\r\\n     */\\r\\n    event AddressSetAsProxy(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address oldImplementationAddress,\\r\\n        address indexed newImplementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the id of the Aave market to which this contract points to.\\r\\n     * @return The market id\\r\\n     **/\\r\\n    function getMarketId() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n     * identify and validate multiple Aave markets.\\r\\n     * @param newMarketId The market id\\r\\n     */\\r\\n    function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns an address by its identifier.\\r\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n     * @dev It returns ZERO if there is no registered address with the given id\\r\\n     * @param id The id\\r\\n     * @return The address of the registered for the specified id\\r\\n     */\\r\\n    function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice General function to update the implementation of a proxy registered with\\r\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n     * set as implementation the `newImplementationAddress`.\\r\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n     * setter function, in order to avoid unexpected consequences\\r\\n     * @param id The id\\r\\n     * @param newImplementationAddress The address of the new implementation\\r\\n     */\\r\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n     * @param id The id\\r\\n     * @param newAddress The address to set\\r\\n     */\\r\\n    function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the Pool proxy.\\r\\n     * @return The Pool proxy address\\r\\n     **/\\r\\n    function getPool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n     * setting the new `pool` implementation when the function is called for the first time.\\r\\n     * @param newPoolImpl The new Pool implementation\\r\\n     **/\\r\\n    function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the PoolConfigurator proxy.\\r\\n     * @return The PoolConfigurator proxy address\\r\\n     **/\\r\\n    function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n     **/\\r\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle.\\r\\n     * @return The address of the PriceOracle\\r\\n     */\\r\\n    function getPriceOracle() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle.\\r\\n     * @param newPriceOracle The address of the new PriceOracle\\r\\n     */\\r\\n    function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL manager.\\r\\n     * @return The address of the ACLManager\\r\\n     */\\r\\n    function getACLManager() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL manager.\\r\\n     * @param newAclManager The address of the new ACLManager\\r\\n     **/\\r\\n    function setACLManager(address newAclManager) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL admin.\\r\\n     * @return The address of the ACL admin\\r\\n     */\\r\\n    function getACLAdmin() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL admin.\\r\\n     * @param newAclAdmin The address of the new ACL admin\\r\\n     */\\r\\n    function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle sentinel.\\r\\n     * @return The address of the PriceOracleSentinel\\r\\n     */\\r\\n    function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle sentinel.\\r\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n     **/\\r\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the data provider.\\r\\n     * @return The address of the DataProvider\\r\\n     */\\r\\n    function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the data provider.\\r\\n     * @param newDataProvider The address of the new DataProvider\\r\\n     **/\\r\\n    function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd532da1cf3670f335dc2a4c7517f46e846026f85a343859768cdd21326d92a9c\",\"license\":\"AGPL-3.0\"},\"interfaces/IWeth.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IWeth {\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 remaining);\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    function decimals() external view returns (uint8 decimalPlaces);\\r\\n\\r\\n    function name() external view returns (string memory tokenName);\\r\\n\\r\\n    function symbol() external view returns (string memory tokenSymbol);\\r\\n\\r\\n    function totalSupply() external view returns (uint256 totalTokensIssued);\\r\\n\\r\\n    function transfer(address to, uint256 value)\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7fc0d90e4239cb98de3065421f518fce4ff1bce8cec08df47013abc326a3a79b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052620186a0600760006101000a81548163ffffffff021916908363ffffffff1602179055506003600760046101000a81548161ffff021916908361ffff1602179055506001600760066101000a81548163ffffffff021916908363ffffffff1602179055503480156200007557600080fd5b506040516200307b3803806200307b83398181016040528101906200009b91906200036a565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506001600560006101000a81548160ff02191690836003811115620000fa57620000f962000406565b5b021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560016101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508060068190555050505050505062000435565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b28262000285565b9050919050565b620002c481620002a5565b8114620002d057600080fd5b50565b600081519050620002e481620002b9565b92915050565b600067ffffffffffffffff82169050919050565b6200030981620002ea565b81146200031557600080fd5b50565b6000815190506200032981620002fe565b92915050565b6000819050919050565b62000344816200032f565b81146200035057600080fd5b50565b600081519050620003648162000339565b92915050565b60008060008060008060c087890312156200038a576200038962000280565b5b60006200039a89828a01620002d3565b9650506020620003ad89828a01620002d3565b9550506040620003c089828a01620002d3565b9450506060620003d389828a01620002d3565b9350506080620003e689828a0162000318565b92505060a0620003f989828a0162000353565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b608051612c236200045860003960008181610a530152610aa70152612c236000f3fe6080604052600436106101185760003560e01c806381447999116100a0578063e7a8d97711610064578063e7a8d97714610389578063e91ead6a146103a0578063e97dcb62146103dd578063f71d96cb146103e7578063fb322c3e146104245761015a565b8063814479991461029f5780638da5cb5b146102ca578063bc8d1bf0146102f5578063beff730f14610321578063dee7bc071461035e5761015a565b80631fe543e3116100e75780631fe543e3146101de5780634f8c70cf146102075780636c6acd8114610232578063719ce73e14610249578063766eef11146102745761015a565b806309bc33a71461015c5780631593a8c714610187578063160344e21461019e5780631f404076146101b55761015a565b3661015a577f999946acc98c7b7dacc26921697d55abbcb1637484b0a73040f0b06287e4332642333460405161015093929190611de0565b60405180910390a1005b005b34801561016857600080fd5b5061017161043b565b60405161017e9190611e17565b60405180910390f35b34801561019357600080fd5b5061019c6104fe565b005b3480156101aa57600080fd5b506101b3610639565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190611e72565b6108c6565b005b3480156101ea57600080fd5b5061020560048036038101906102009190611ff8565b610a51565b005b34801561021357600080fd5b5061021c610b11565b6040516102299190612075565b60405180910390f35b34801561023e57600080fd5b50610247610b37565b005b34801561025557600080fd5b5061025e610d1f565b60405161026b9190611e17565b60405180910390f35b34801561028057600080fd5b50610289610d25565b6040516102969190611e17565b60405180910390f35b3480156102ab57600080fd5b506102b4610d32565b6040516102c19190612107565b60405180910390f35b3480156102d657600080fd5b506102df610d45565b6040516102ec9190612122565b60405180910390f35b34801561030157600080fd5b5061030a610d6b565b60405161031892919061213d565b60405180910390f35b34801561032d57600080fd5b5061034860048036038101906103439190611e72565b610eb1565b6040516103559190611e17565b60405180910390f35b34801561036a57600080fd5b50610373610ed5565b6040516103809190611e17565b60405180910390f35b34801561039557600080fd5b5061039e610eda565b005b3480156103ac57600080fd5b506103c760048036038101906103c29190612192565b61110c565b6040516103d49190611e17565b60405180910390f35b6103e5611124565b005b3480156103f357600080fd5b5061040e60048036038101906104099190611e72565b611382565b60405161041b9190612075565b60405180910390f35b34801561043057600080fd5b506104396113c1565b005b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf919061224c565b505050915050806a52b7d2dcc80cd2e400000060326104ee91906122f6565b6104f8919061237f565b91505090565b6000600381111561051257610511612090565b5b600560009054906101000a900460ff16600381111561053457610533612090565b5b14610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b9061240d565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb9061249f565b60405180910390fd5b6002600560006101000a81548160ff0219169083600381111561062a57610629612090565b5b02179055506106376115d3565b565b6001600381111561064d5761064c612090565b5b600560009054906101000a900460ff16600381111561066f5761066e612090565b5b146106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a69061250b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107369061249f565b60405180910390fd5b6000600190505b6001805490508110156107ef576000600182815481106107695761076861252b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107e79061255a565b915050610746565b50600067ffffffffffffffff81111561080b5761080a611eb5565b5b6040519080825280602002602001820160405280156108395781602001602082028036833780820191505090505b506001908051906020019061084f929190611c92565b506000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080819055506000600560006101000a81548160ff021916908360038111156108bf576108be612090565b5b0217905550565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109459291906125a3565b6020604051808303816000875af1158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190612604565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166369328dec600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683306040518463ffffffff1660e01b8152600401610a0a93929190612631565b6020604051808303816000875af1158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d9190612668565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610afa929190612695565b60405180910390fd5b610b0d8282611795565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbe9061249f565b60405180910390fd5b600068056bc75e2d631000009050610bde816108c6565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c3b9190612122565b602060405180830381865afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c9190612668565b9050610c87816119e5565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610cef573d6000803e3d6000fd5b506001600560006101000a81548160ff02191690836003811115610d1657610d15612090565b5b02179055505050565b60005481565b6000600180549050905090565b600560009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df59061249f565b60405180910390fd5b600080600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf92857c306040518263ffffffff1660e01b8152600401610e5c9190612122565b60c060405180830381865afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d91906126be565b505050509150915081819350935050509091565b60088181548110610ec157600080fd5b906000526020600020016000915090505481565b603281565b60016003811115610eee57610eed612090565b5b600560009054906101000a900460ff166003811115610f1057610f0f612090565b5b14610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f479061250b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd79061249f565b60405180910390fd5b6000670de0b6b3a76400009050610ff6816108c6565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110539190612122565b602060405180830381865afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190612668565b905061109f816119e5565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611107573d6000803e3d6000fd5b505050565b60046020528060005260406000206000915090505481565b6000600381111561113857611137612090565b5b600560009054906101000a900460ff16600381111561115a57611159612090565b5b1461119a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111919061240d565b60405180910390fd5b6111a261043b565b3410156111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db90612797565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461129691906127b7565b92505081905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050505061132934611b16565b3460008082825461133a91906127b7565b925050819055507f3adf88379a3a55a4c298c42c5d8cf7e2be6ba616ce552f3fdf798c8b0912e543423334600054604051611378949392919061280d565b60405180910390a1565b6001818154811061139257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003808111156113d4576113d3612090565b5b600560009054906101000a900460ff1660038111156113f6576113f5612090565b5b14611436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142d9061289e565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd9061249f565b60405180910390fd5b6114d16000546108c6565b6114dc6000546119e5565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000549081150290604051600060405180830381858888f19350505050158015611546573d6000803e3d6000fd5b506001600560006101000a81548160ff0219169083600381111561156d5761156c612090565b5b02179055507fe69918a4005007a4f1ece77dfd6732a6507d48dedd08837d38c74fb26a9fad2942600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000546040516115c99392919061291d565b60405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165a9061249f565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600654600560019054906101000a900467ffffffffffffffff16600760049054906101000a900461ffff16600760009054906101000a900463ffffffff16600760069054906101000a900463ffffffff166040518663ffffffff1660e01b81526004016117149594939291906129cc565b6020604051808303816000875af1158015611733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117579190612668565b90507f90dce42ecf81a4e47188055540db1bde6c77b88941ba9aaf76e6e38bdc9a8650428260405161178a92919061213d565b60405180910390a150565b600260038111156117a9576117a8612090565b5b600560009054906101000a900460ff1660038111156117cb576117ca612090565b5b1461180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290612a6b565b60405180910390fd5b8060089080519060200190611821929190611d1c565b50600060086000815481106118395761183861252b565b5b906000526020600020015411611884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187b90612ad7565b60405180910390fd5b600060018054905060086000815481106118a1576118a061252b565b5b90600052602060002001546118b69190612af7565b9050600181815481106118cc576118cb61252b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003600560006101000a81548160ff0219169083600381111561195d5761195c612090565b5b02179055507f1fb16c696e197eb943bf66b85630ccdc6b3ebcbbee7452c1335238ace4aaeb3c4260086000815481106119995761199861252b565b5b906000526020600020015483600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516119d89493929190612b28565b60405180910390a1505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff1660e01b8152600401611a429291906125a3565b6020604051808303816000875af1158015611a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a859190612604565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401611ae19190611e17565b600060405180830381600087803b158015611afb57600080fd5b505af1158015611b0f573d6000803e3d6000fd5b5050505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b959291906125a3565b6020604051808303816000875af1158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612604565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663617ba037600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16833060006040518563ffffffff1660e01b8152600401611c5d9493929190612ba8565b600060405180830381600087803b158015611c7757600080fd5b505af1158015611c8b573d6000803e3d6000fd5b5050505050565b828054828255906000526020600020908101928215611d0b579160200282015b82811115611d0a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611cb2565b5b509050611d189190611d69565b5090565b828054828255906000526020600020908101928215611d58579160200282015b82811115611d57578251825591602001919060010190611d3c565b5b509050611d659190611d69565b5090565b5b80821115611d82576000816000905550600101611d6a565b5090565b6000819050919050565b611d9981611d86565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dca82611d9f565b9050919050565b611dda81611dbf565b82525050565b6000606082019050611df56000830186611d90565b611e026020830185611dd1565b611e0f6040830184611d90565b949350505050565b6000602082019050611e2c6000830184611d90565b92915050565b6000604051905090565b600080fd5b600080fd5b611e4f81611d86565b8114611e5a57600080fd5b50565b600081359050611e6c81611e46565b92915050565b600060208284031215611e8857611e87611e3c565b5b6000611e9684828501611e5d565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611eed82611ea4565b810181811067ffffffffffffffff82111715611f0c57611f0b611eb5565b5b80604052505050565b6000611f1f611e32565b9050611f2b8282611ee4565b919050565b600067ffffffffffffffff821115611f4b57611f4a611eb5565b5b602082029050602081019050919050565b600080fd5b6000611f74611f6f84611f30565b611f15565b90508083825260208201905060208402830185811115611f9757611f96611f5c565b5b835b81811015611fc05780611fac8882611e5d565b845260208401935050602081019050611f99565b5050509392505050565b600082601f830112611fdf57611fde611e9f565b5b8135611fef848260208601611f61565b91505092915050565b6000806040838503121561200f5761200e611e3c565b5b600061201d85828601611e5d565b925050602083013567ffffffffffffffff81111561203e5761203d611e41565b5b61204a85828601611fca565b9150509250929050565b600061205f82611d9f565b9050919050565b61206f81612054565b82525050565b600060208201905061208a6000830184612066565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106120d0576120cf612090565b5b50565b60008190506120e1826120bf565b919050565b60006120f1826120d3565b9050919050565b612101816120e6565b82525050565b600060208201905061211c60008301846120f8565b92915050565b60006020820190506121376000830184611dd1565b92915050565b60006040820190506121526000830185611d90565b61215f6020830184611d90565b9392505050565b61216f81611dbf565b811461217a57600080fd5b50565b60008135905061218c81612166565b92915050565b6000602082840312156121a8576121a7611e3c565b5b60006121b68482850161217d565b91505092915050565b600069ffffffffffffffffffff82169050919050565b6121de816121bf565b81146121e957600080fd5b50565b6000815190506121fb816121d5565b92915050565b6000819050919050565b61221481612201565b811461221f57600080fd5b50565b6000815190506122318161220b565b92915050565b60008151905061224681611e46565b92915050565b600080600080600060a0868803121561226857612267611e3c565b5b6000612276888289016121ec565b955050602061228788828901612222565b945050604061229888828901612237565b93505060606122a988828901612237565b92505060806122ba888289016121ec565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061230182611d86565b915061230c83611d86565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612345576123446122c7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061238a82611d86565b915061239583611d86565b9250826123a5576123a4612350565b5b828204905092915050565b600082825260208201905092915050565b7f4c6f74746572792073686f756c64206265207374617274656400000000000000600082015250565b60006123f76019836123b0565b9150612402826123c1565b602082019050919050565b60006020820190508181036000830152612426816123ea565b9050919050565b7f4f6e6c792061646d696e20697320616c6c6f77656420746f20646f207468697360008201527f206f7065726174696f6e00000000000000000000000000000000000000000000602082015250565b6000612489602a836123b0565b91506124948261242d565b604082019050919050565b600060208201905081810360008301526124b88161247c565b9050919050565b7f4c6f74746572792073686f756c642062652066696e6973686564000000000000600082015250565b60006124f5601a836123b0565b9150612500826124bf565b602082019050919050565b60006020820190508181036000830152612524816124e8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061256582611d86565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612598576125976122c7565b5b600182019050919050565b60006040820190506125b86000830185611dd1565b6125c56020830184611d90565b9392505050565b60008115159050919050565b6125e1816125cc565b81146125ec57600080fd5b50565b6000815190506125fe816125d8565b92915050565b60006020828403121561261a57612619611e3c565b5b6000612628848285016125ef565b91505092915050565b60006060820190506126466000830186611dd1565b6126536020830185611d90565b6126606040830184611dd1565b949350505050565b60006020828403121561267e5761267d611e3c565b5b600061268c84828501612237565b91505092915050565b60006040820190506126aa6000830185611dd1565b6126b76020830184611dd1565b9392505050565b60008060008060008060c087890312156126db576126da611e3c565b5b60006126e989828a01612237565b96505060206126fa89828a01612237565b955050604061270b89828a01612237565b945050606061271c89828a01612237565b935050608061272d89828a01612237565b92505060a061273e89828a01612237565b9150509295509295509295565b7f4e6f7420656e6f7567682045544820746f20656e746572210000000000000000600082015250565b60006127816018836123b0565b915061278c8261274b565b602082019050919050565b600060208201905081810360008301526127b081612774565b9050919050565b60006127c282611d86565b91506127cd83611d86565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612802576128016122c7565b5b828201905092915050565b60006080820190506128226000830187611d90565b61282f6020830186611dd1565b61283c6040830185611d90565b6128496060830184611d90565b95945050505050565b7f4c6f74746572792073686f756c642073656c6563742077696e6e657200000000600082015250565b6000612888601c836123b0565b915061289382612852565b602082019050919050565b600060208201905081810360008301526128b78161287b565b9050919050565b6000819050919050565b60006128e36128de6128d984611d9f565b6128be565b611d9f565b9050919050565b60006128f5826128c8565b9050919050565b6000612907826128ea565b9050919050565b612917816128fc565b82525050565b60006060820190506129326000830186611d90565b61293f602083018561290e565b61294c6040830184611d90565b949350505050565b6000819050919050565b61296781612954565b82525050565b600067ffffffffffffffff82169050919050565b61298a8161296d565b82525050565b600061ffff82169050919050565b6129a781612990565b82525050565b600063ffffffff82169050919050565b6129c6816129ad565b82525050565b600060a0820190506129e1600083018861295e565b6129ee6020830187612981565b6129fb604083018661299e565b612a0860608301856129bd565b612a1560808301846129bd565b9695505050505050565b7f4c6f7474657279206973206e6f7420696e20636f727265637420737461746500600082015250565b6000612a55601f836123b0565b9150612a6082612a1f565b602082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b7f52616e646f6d206e756d6265722073686f756c64206265203e20300000000000600082015250565b6000612ac1601b836123b0565b9150612acc82612a8b565b602082019050919050565b60006020820190508181036000830152612af081612ab4565b9050919050565b6000612b0282611d86565b9150612b0d83611d86565b925082612b1d57612b1c612350565b5b828206905092915050565b6000608082019050612b3d6000830187611d90565b612b4a6020830186611d90565b612b576040830185611d90565b612b64606083018461290e565b95945050505050565b6000819050919050565b6000612b92612b8d612b8884612b6d565b6128be565b612990565b9050919050565b612ba281612b77565b82525050565b6000608082019050612bbd6000830187611dd1565b612bca6020830186611d90565b612bd76040830185611dd1565b612be46060830184612b99565b9594505050505056fea2646970667358221220876f4d584375639d57e9130b3112f6ae94bc4f012adf36c236125131440b93df64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c806381447999116100a0578063e7a8d97711610064578063e7a8d97714610389578063e91ead6a146103a0578063e97dcb62146103dd578063f71d96cb146103e7578063fb322c3e146104245761015a565b8063814479991461029f5780638da5cb5b146102ca578063bc8d1bf0146102f5578063beff730f14610321578063dee7bc071461035e5761015a565b80631fe543e3116100e75780631fe543e3146101de5780634f8c70cf146102075780636c6acd8114610232578063719ce73e14610249578063766eef11146102745761015a565b806309bc33a71461015c5780631593a8c714610187578063160344e21461019e5780631f404076146101b55761015a565b3661015a577f999946acc98c7b7dacc26921697d55abbcb1637484b0a73040f0b06287e4332642333460405161015093929190611de0565b60405180910390a1005b005b34801561016857600080fd5b5061017161043b565b60405161017e9190611e17565b60405180910390f35b34801561019357600080fd5b5061019c6104fe565b005b3480156101aa57600080fd5b506101b3610639565b005b3480156101c157600080fd5b506101dc60048036038101906101d79190611e72565b6108c6565b005b3480156101ea57600080fd5b5061020560048036038101906102009190611ff8565b610a51565b005b34801561021357600080fd5b5061021c610b11565b6040516102299190612075565b60405180910390f35b34801561023e57600080fd5b50610247610b37565b005b34801561025557600080fd5b5061025e610d1f565b60405161026b9190611e17565b60405180910390f35b34801561028057600080fd5b50610289610d25565b6040516102969190611e17565b60405180910390f35b3480156102ab57600080fd5b506102b4610d32565b6040516102c19190612107565b60405180910390f35b3480156102d657600080fd5b506102df610d45565b6040516102ec9190612122565b60405180910390f35b34801561030157600080fd5b5061030a610d6b565b60405161031892919061213d565b60405180910390f35b34801561032d57600080fd5b5061034860048036038101906103439190611e72565b610eb1565b6040516103559190611e17565b60405180910390f35b34801561036a57600080fd5b50610373610ed5565b6040516103809190611e17565b60405180910390f35b34801561039557600080fd5b5061039e610eda565b005b3480156103ac57600080fd5b506103c760048036038101906103c29190612192565b61110c565b6040516103d49190611e17565b60405180910390f35b6103e5611124565b005b3480156103f357600080fd5b5061040e60048036038101906104099190611e72565b611382565b60405161041b9190612075565b60405180910390f35b34801561043057600080fd5b506104396113c1565b005b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf919061224c565b505050915050806a52b7d2dcc80cd2e400000060326104ee91906122f6565b6104f8919061237f565b91505090565b6000600381111561051257610511612090565b5b600560009054906101000a900460ff16600381111561053457610533612090565b5b14610574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056b9061240d565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb9061249f565b60405180910390fd5b6002600560006101000a81548160ff0219169083600381111561062a57610629612090565b5b02179055506106376115d3565b565b6001600381111561064d5761064c612090565b5b600560009054906101000a900460ff16600381111561066f5761066e612090565b5b146106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a69061250b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107369061249f565b60405180910390fd5b6000600190505b6001805490508110156107ef576000600182815481106107695761076861252b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107e79061255a565b915050610746565b50600067ffffffffffffffff81111561080b5761080a611eb5565b5b6040519080825280602002602001820160405280156108395781602001602082028036833780820191505090505b506001908051906020019061084f929190611c92565b506000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080819055506000600560006101000a81548160ff021916908360038111156108bf576108be612090565b5b0217905550565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109459291906125a3565b6020604051808303816000875af1158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190612604565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166369328dec600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683306040518463ffffffff1660e01b8152600401610a0a93929190612631565b6020604051808303816000875af1158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d9190612668565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610afa929190612695565b60405180910390fd5b610b0d8282611795565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbe9061249f565b60405180910390fd5b600068056bc75e2d631000009050610bde816108c6565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c3b9190612122565b602060405180830381865afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c9190612668565b9050610c87816119e5565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610cef573d6000803e3d6000fd5b506001600560006101000a81548160ff02191690836003811115610d1657610d15612090565b5b02179055505050565b60005481565b6000600180549050905090565b600560009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df59061249f565b60405180910390fd5b600080600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf92857c306040518263ffffffff1660e01b8152600401610e5c9190612122565b60c060405180830381865afa158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d91906126be565b505050509150915081819350935050509091565b60088181548110610ec157600080fd5b906000526020600020016000915090505481565b603281565b60016003811115610eee57610eed612090565b5b600560009054906101000a900460ff166003811115610f1057610f0f612090565b5b14610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f479061250b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd79061249f565b60405180910390fd5b6000670de0b6b3a76400009050610ff6816108c6565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110539190612122565b602060405180830381865afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190612668565b905061109f816119e5565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611107573d6000803e3d6000fd5b505050565b60046020528060005260406000206000915090505481565b6000600381111561113857611137612090565b5b600560009054906101000a900460ff16600381111561115a57611159612090565b5b1461119a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111919061240d565b60405180910390fd5b6111a261043b565b3410156111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db90612797565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461129691906127b7565b92505081905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050505061132934611b16565b3460008082825461133a91906127b7565b925050819055507f3adf88379a3a55a4c298c42c5d8cf7e2be6ba616ce552f3fdf798c8b0912e543423334600054604051611378949392919061280d565b60405180910390a1565b6001818154811061139257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003808111156113d4576113d3612090565b5b600560009054906101000a900460ff1660038111156113f6576113f5612090565b5b14611436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142d9061289e565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd9061249f565b60405180910390fd5b6114d16000546108c6565b6114dc6000546119e5565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000549081150290604051600060405180830381858888f19350505050158015611546573d6000803e3d6000fd5b506001600560006101000a81548160ff0219169083600381111561156d5761156c612090565b5b02179055507fe69918a4005007a4f1ece77dfd6732a6507d48dedd08837d38c74fb26a9fad2942600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000546040516115c99392919061291d565b60405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165a9061249f565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600654600560019054906101000a900467ffffffffffffffff16600760049054906101000a900461ffff16600760009054906101000a900463ffffffff16600760069054906101000a900463ffffffff166040518663ffffffff1660e01b81526004016117149594939291906129cc565b6020604051808303816000875af1158015611733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117579190612668565b90507f90dce42ecf81a4e47188055540db1bde6c77b88941ba9aaf76e6e38bdc9a8650428260405161178a92919061213d565b60405180910390a150565b600260038111156117a9576117a8612090565b5b600560009054906101000a900460ff1660038111156117cb576117ca612090565b5b1461180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290612a6b565b60405180910390fd5b8060089080519060200190611821929190611d1c565b50600060086000815481106118395761183861252b565b5b906000526020600020015411611884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187b90612ad7565b60405180910390fd5b600060018054905060086000815481106118a1576118a061252b565b5b90600052602060002001546118b69190612af7565b9050600181815481106118cc576118cb61252b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003600560006101000a81548160ff0219169083600381111561195d5761195c612090565b5b02179055507f1fb16c696e197eb943bf66b85630ccdc6b3ebcbbee7452c1335238ace4aaeb3c4260086000815481106119995761199861252b565b5b906000526020600020015483600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516119d89493929190612b28565b60405180910390a1505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff1660e01b8152600401611a429291906125a3565b6020604051808303816000875af1158015611a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a859190612604565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401611ae19190611e17565b600060405180830381600087803b158015611afb57600080fd5b505af1158015611b0f573d6000803e3d6000fd5b5050505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b959291906125a3565b6020604051808303816000875af1158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190612604565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663617ba037600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16833060006040518563ffffffff1660e01b8152600401611c5d9493929190612ba8565b600060405180830381600087803b158015611c7757600080fd5b505af1158015611c8b573d6000803e3d6000fd5b5050505050565b828054828255906000526020600020908101928215611d0b579160200282015b82811115611d0a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611cb2565b5b509050611d189190611d69565b5090565b828054828255906000526020600020908101928215611d58579160200282015b82811115611d57578251825591602001919060010190611d3c565b5b509050611d659190611d69565b5090565b5b80821115611d82576000816000905550600101611d6a565b5090565b6000819050919050565b611d9981611d86565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dca82611d9f565b9050919050565b611dda81611dbf565b82525050565b6000606082019050611df56000830186611d90565b611e026020830185611dd1565b611e0f6040830184611d90565b949350505050565b6000602082019050611e2c6000830184611d90565b92915050565b6000604051905090565b600080fd5b600080fd5b611e4f81611d86565b8114611e5a57600080fd5b50565b600081359050611e6c81611e46565b92915050565b600060208284031215611e8857611e87611e3c565b5b6000611e9684828501611e5d565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611eed82611ea4565b810181811067ffffffffffffffff82111715611f0c57611f0b611eb5565b5b80604052505050565b6000611f1f611e32565b9050611f2b8282611ee4565b919050565b600067ffffffffffffffff821115611f4b57611f4a611eb5565b5b602082029050602081019050919050565b600080fd5b6000611f74611f6f84611f30565b611f15565b90508083825260208201905060208402830185811115611f9757611f96611f5c565b5b835b81811015611fc05780611fac8882611e5d565b845260208401935050602081019050611f99565b5050509392505050565b600082601f830112611fdf57611fde611e9f565b5b8135611fef848260208601611f61565b91505092915050565b6000806040838503121561200f5761200e611e3c565b5b600061201d85828601611e5d565b925050602083013567ffffffffffffffff81111561203e5761203d611e41565b5b61204a85828601611fca565b9150509250929050565b600061205f82611d9f565b9050919050565b61206f81612054565b82525050565b600060208201905061208a6000830184612066565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106120d0576120cf612090565b5b50565b60008190506120e1826120bf565b919050565b60006120f1826120d3565b9050919050565b612101816120e6565b82525050565b600060208201905061211c60008301846120f8565b92915050565b60006020820190506121376000830184611dd1565b92915050565b60006040820190506121526000830185611d90565b61215f6020830184611d90565b9392505050565b61216f81611dbf565b811461217a57600080fd5b50565b60008135905061218c81612166565b92915050565b6000602082840312156121a8576121a7611e3c565b5b60006121b68482850161217d565b91505092915050565b600069ffffffffffffffffffff82169050919050565b6121de816121bf565b81146121e957600080fd5b50565b6000815190506121fb816121d5565b92915050565b6000819050919050565b61221481612201565b811461221f57600080fd5b50565b6000815190506122318161220b565b92915050565b60008151905061224681611e46565b92915050565b600080600080600060a0868803121561226857612267611e3c565b5b6000612276888289016121ec565b955050602061228788828901612222565b945050604061229888828901612237565b93505060606122a988828901612237565b92505060806122ba888289016121ec565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061230182611d86565b915061230c83611d86565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612345576123446122c7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061238a82611d86565b915061239583611d86565b9250826123a5576123a4612350565b5b828204905092915050565b600082825260208201905092915050565b7f4c6f74746572792073686f756c64206265207374617274656400000000000000600082015250565b60006123f76019836123b0565b9150612402826123c1565b602082019050919050565b60006020820190508181036000830152612426816123ea565b9050919050565b7f4f6e6c792061646d696e20697320616c6c6f77656420746f20646f207468697360008201527f206f7065726174696f6e00000000000000000000000000000000000000000000602082015250565b6000612489602a836123b0565b91506124948261242d565b604082019050919050565b600060208201905081810360008301526124b88161247c565b9050919050565b7f4c6f74746572792073686f756c642062652066696e6973686564000000000000600082015250565b60006124f5601a836123b0565b9150612500826124bf565b602082019050919050565b60006020820190508181036000830152612524816124e8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061256582611d86565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612598576125976122c7565b5b600182019050919050565b60006040820190506125b86000830185611dd1565b6125c56020830184611d90565b9392505050565b60008115159050919050565b6125e1816125cc565b81146125ec57600080fd5b50565b6000815190506125fe816125d8565b92915050565b60006020828403121561261a57612619611e3c565b5b6000612628848285016125ef565b91505092915050565b60006060820190506126466000830186611dd1565b6126536020830185611d90565b6126606040830184611dd1565b949350505050565b60006020828403121561267e5761267d611e3c565b5b600061268c84828501612237565b91505092915050565b60006040820190506126aa6000830185611dd1565b6126b76020830184611dd1565b9392505050565b60008060008060008060c087890312156126db576126da611e3c565b5b60006126e989828a01612237565b96505060206126fa89828a01612237565b955050604061270b89828a01612237565b945050606061271c89828a01612237565b935050608061272d89828a01612237565b92505060a061273e89828a01612237565b9150509295509295509295565b7f4e6f7420656e6f7567682045544820746f20656e746572210000000000000000600082015250565b60006127816018836123b0565b915061278c8261274b565b602082019050919050565b600060208201905081810360008301526127b081612774565b9050919050565b60006127c282611d86565b91506127cd83611d86565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612802576128016122c7565b5b828201905092915050565b60006080820190506128226000830187611d90565b61282f6020830186611dd1565b61283c6040830185611d90565b6128496060830184611d90565b95945050505050565b7f4c6f74746572792073686f756c642073656c6563742077696e6e657200000000600082015250565b6000612888601c836123b0565b915061289382612852565b602082019050919050565b600060208201905081810360008301526128b78161287b565b9050919050565b6000819050919050565b60006128e36128de6128d984611d9f565b6128be565b611d9f565b9050919050565b60006128f5826128c8565b9050919050565b6000612907826128ea565b9050919050565b612917816128fc565b82525050565b60006060820190506129326000830186611d90565b61293f602083018561290e565b61294c6040830184611d90565b949350505050565b6000819050919050565b61296781612954565b82525050565b600067ffffffffffffffff82169050919050565b61298a8161296d565b82525050565b600061ffff82169050919050565b6129a781612990565b82525050565b600063ffffffff82169050919050565b6129c6816129ad565b82525050565b600060a0820190506129e1600083018861295e565b6129ee6020830187612981565b6129fb604083018661299e565b612a0860608301856129bd565b612a1560808301846129bd565b9695505050505050565b7f4c6f7474657279206973206e6f7420696e20636f727265637420737461746500600082015250565b6000612a55601f836123b0565b9150612a6082612a1f565b602082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b7f52616e646f6d206e756d6265722073686f756c64206265203e20300000000000600082015250565b6000612ac1601b836123b0565b9150612acc82612a8b565b602082019050919050565b60006020820190508181036000830152612af081612ab4565b9050919050565b6000612b0282611d86565b9150612b0d83611d86565b925082612b1d57612b1c612350565b5b828206905092915050565b6000608082019050612b3d6000830187611d90565b612b4a6020830186611d90565b612b576040830185611d90565b612b64606083018461290e565b95945050505050565b6000819050919050565b6000612b92612b8d612b8884612b6d565b6128be565b612990565b9050919050565b612ba281612b77565b82525050565b6000608082019050612bbd6000830187611dd1565b612bca6020830186611d90565b612bd76040830185611dd1565b612be46060830184612b99565b9594505050505056fea2646970667358221220876f4d584375639d57e9130b3112f6ae94bc4f012adf36c236125131440b93df64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1228,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "prizePool",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1231,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1233,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 1235,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1239,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "playerDeposit",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1247,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lottery_state",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(LOTTERY_STATE)1244"
      },
      {
        "astId": 1249,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "subscriptionId",
        "offset": 1,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 1251,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "keyHash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 1254,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 1257,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 1260,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "numWords",
        "offset": 6,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 1263,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "randomWords",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1266,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "priceFeed",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AggregatorV3Interface)160"
      },
      {
        "astId": 1269,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(VRFCoordinatorV2Interface)351"
      },
      {
        "astId": 1272,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "aavePool",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IPool)3143"
      },
      {
        "astId": 1275,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "wethContract",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IWeth)3428"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)160": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)3143": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IWeth)3428": {
        "encoding": "inplace",
        "label": "contract IWeth",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)351": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(LOTTERY_STATE)1244": {
        "encoding": "inplace",
        "label": "enum Lottery.LOTTERY_STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}